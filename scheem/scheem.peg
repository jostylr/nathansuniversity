start =
    expression


quote = 
  _ "'" _ e: expression
    {return ["quote", e]}

expression =
  _ n : NumericLiteral
    {return n}
  / _ a : atom _
	  {return a}
	/ _ s: string  
	  {return s}
	/ quote 
  / _ "(" _ e: expression+ _ ")" _
    {return e}

validchar 
 	= [0-9a-zA-Z_?!+=@#$%^&*/.-]
    
string = 
  _ "\"" s :[^\"\n\r]* "\""
    {return s.join(""); }
    
atom = 
	chars:validchar+
        { console.log(chars); return chars.join(""); }
        

        
_  =
  ws* comment+ ws*
  / ws*

ws = 
  [ \t\r\n]

comment = 
  ";;" [^\n\r]*
  
  
// from js pegjs example  
NumericLiteral "number"
  = literal:(HexIntegerLiteral / DecimalLiteral)  {
      console.log(literal)
      return literal;
    }

DecimalLiteral
  = before:DecimalIntegerLiteral
    "."
    after:DecimalDigits?
    exponent:ExponentPart? {
      return parseFloat(before + "." + after + exponent);
    }
  / "." after:DecimalDigits exponent:ExponentPart? {
      return parseFloat("." + after + exponent);
    }
  / before:DecimalIntegerLiteral exponent:ExponentPart? {
      return parseFloat(before + exponent);
    }

DecimalIntegerLiteral
  = "0" / digit:NonZeroDigit digits:DecimalDigits? { return digit + digits; }

DecimalDigits
  = digits:DecimalDigit+ { return digits.join(""); }

DecimalDigit
  = [0-9]

NonZeroDigit
  = [1-9]

ExponentPart
  = indicator:ExponentIndicator integer:SignedInteger {
      return indicator + integer;
    }

ExponentIndicator
  = [eE]

SignedInteger
  = sign:[-+]? digits:DecimalDigits { return sign + digits; }

HexIntegerLiteral
  = "0" [xX] digits:HexDigit+ { return parseInt("0x" + digits.join("")); }

HexDigit
  = [0-9a-fA-F]
