var Turtle;

module.exports = Turtle = function (o) {
    o = o || {};
    var w = o.w || 200;
    var h = o.w || 200;
    this.paper = Raphael(o.div || "#tortoise", w, h);
    this.originx = w / 2;
    this.originy = h / 2;
    this.oldx = 0;
    this.oldy = 0;
    this.clear();
    this.thick = o.thick || 4;
    this.speed = o.speed || 1; //fastest
    this.backg = o.backg || "white"; // white background
    this.color = o.color || "black;"
    this.pen = true;
    this.current = [0, 0, 90];
    this.steps = [{tag : "position", x : 0, y : 0}, {tag : "angle", value : 90}];
};

var tp = Turtle.prototype;

tp.com = function (c) {
  if (c && c.hasOwnProperty('tag')) {
    console.log(c);
    this[c.tag](c);
  } else {
    throw "command without tag " + c;
  }
  this.steps.push(c);
};

tp.ret = function () {
  return this.steps;
};


tp.position = function (c) {

    if(this.pen) {
      this.drawTo(c.x, c.y, false);
    } else if (this.eraser) {
        this.drawTo(c.x, c.y, true);
      }

    this.moveTurtle(c.x, c.y);
};


tp.angle = function (c) {

    this.rotateTurtle(c.value);
};


tp.penup = function () {
  this.pen = false;
  this.eraser = false;
};

tp.pendown = function () {
  this.pen = true;
  this.eraser = false;
};

tp.eraser = function () {
  this.eraser = true;
  this.pen = false;
};

tp.clear = function () {
  this.paper.clear();
  this.pen = true;
  this.turtleimg = this.paper.image(
      "http://nathansuniversity.com/gfx/turtle2.png",
      0, 0, 64, 64);
  
};

tp.setColor = function (c) {
  this.color = c.value;
};

tp.setThick = function (c) {
  this.thick = c.value;
}

tp.speed = function (c) {
  this.speed = c.value;
};

tp.moveTurtle = function (x, y) {
  this.turtleimg.attr({
    x: x - 32 + this.originx,
    y: - y - 32 + this.originy
  });
  
  this.oldx = x;
  this.oldy = y;
  
  this.turtleimg.toFront();
};

tp.rotateTurtle = function (a) {
  
  this.turtleimg.attr({
    transform: "r" + (-a)
  });
  
  this.turtleimg.toFront();  
}

Turtle.prototype.drawTo = function (x, y, erase) {
    var x1 = this.oldx + this.originx;
    var y1 = this.originy - this.oldy;
    console.log(x1, y1, x + this.originx, this.originy - y)
    var params = { "stroke-width": this.thick, "color" : (erase ? this.backg : this.color) };
    var path = this.paper.path(Raphael.format("M{0},{1}L{2},{3}",
        x1, y1, x + this.originx,  this.originy - y)).attr(params);
};
