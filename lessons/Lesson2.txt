Lesson 2.1

var prelude = function(expr) {
    // Your code here
    return {
        tag : 'seq',
        left : {tag: 'note', pitch:'d4', dur : 500},
        right: expr
    };
};

Lesson 2.2

var reverse = function(expr) {
    // Your code here
    if (! expr) {
        return {};
    }
            
    var ret = {};
    var temp;
    var stack = [[ret, expr]];
    var store;
    var cur;
    
    while (stack.length) {
        temp = stack.pop();
        store = temp[0];
        cur = temp[1];
        if (cur.hasOwnProperty('tag')) {
            store.tag = cur.tag;
        } else {
            continue;
        }
        if (cur.tag === 'seq') {
            if (cur.hasOwnProperty('left')) {
                store.right = {};
                stack.push([store.right, cur.left]);
            }
            if (cur.hasOwnProperty('right')) {
                store.left = {};
                stack.push([store.left, cur.right]);
            }
        }
        if (cur.tag === 'note') {
            store.pitch = cur.pitch;
            store.dur = cur.dur;
        }
    }
    return ret; 
};

Lesson 2.3

var endTime = function (time, expr) {
    // your code here
    if (!expr) {
        return time;
    }
    var stack = [expr];
    var cur;
    
    while (stack.length) {
        cur = stack.pop();
        if (cur.tag === 'note') {
            time += cur.dur;
        }
        if (cur.tag ==='seq') {
            if (cur.left) {
                stack.push(cur.left);
            }
            if (cur.right) {
                stack.push(cur.right);
            }
        }
    }
    return time;
};

Lesson 2.4

// maybe some helper functions
var computeStarts = function (arrnote) {
    var i;
    var n = arrnote.length;
    var cur;
    var time = 0;
    
    for (i = 0; i < n; i += 1) {
        cur = arrnote[i];
        cur.start = time;
        time += cur.dur;
    }
};

var makeNotes = function (musexpr, arrnote) {
    if (!musexpr) {
        return;
    }
    if (musexpr.tag === 'note') {
        arrnote.push(musexpr);
        return;
    }
    if (musexpr.tag === 'seq') {
        if (musexpr.hasOwnProperty('left')) {
            makeNotes(musexpr.left, arrnote);
        }
        if (musexpr.hasOwnProperty('right')) {
            makeNotes(musexpr.right, arrnote);
        }
    }
    return;
    
};

var compile = function (musexpr) {
    // your code here
    if (! musexpr) {
        return [];
    }
    var arrnote = [];
    makeNotes(musexpr, arrnote);
    
    computeStarts(arrnote);
    return arrnote;
};

Lesson 2.5

var playMUS = function (musexpr) {
    var notes = compile(musexpr);
    return playNOTE(notes);
};

Lesson 2.7

// maybe some helper functions
var arrayNotes = function (arrnotes, justnotes, time) {
    var i;
    var n = arrnotes.length;
    var ii;
    var nn; 
    var cur;
    var temptime;
    var oldtime;
    
    for (i = 0; i < n; i += 1) {
        cur = arrnotes[i];
        if (cur.length) { //crappy array test
          nn = cur.length;
          oldtime = time;
          for (ii = 0; ii < nn; ii += 1) {
            temptime = arrayNotes(cur[ii], justnotes, oldtime); 
            time = (time > temptime) ? time : temptime; 
          }
        } else {
          justnotes.push(cur);
          cur.start = time;
          time += cur.dur;
        }
    }
    return time;
};

var makeNotes = function (musexpr, arrnote) {
    var partop, temp;
    
    if (!musexpr) {
        return;
    }
    if (musexpr.tag === 'note') {
        arrnote.push(musexpr);
        return;
    }
    if (musexpr.tag === 'seq') {
        if (musexpr.hasOwnProperty('left')) {
            makeNotes(musexpr.left, arrnote);
        }
        if (musexpr.hasOwnProperty('right')) {
            makeNotes(musexpr.right, arrnote);
        }
    }

    if (musexpr.tag === 'par') {
      partop = [];
      arrnote.push(partop);
      if (musexpr.hasOwnProperty('left')) {
        temp = [];
        partop.push(temp);
        makeNotes(musexpr.left, temp);
      }
      if (musexpr.hasOwnProperty('right')) {
        temp = [];
        partop.push(temp);
        makeNotes(musexpr.right, temp);
      }
      
    }
    
    
    return;
    
};

var compile = function (musexpr) {
    // your code here
    if (! musexpr) {
        return [];
    }
    var arrnote = [];
    makeNotes(musexpr, arrnote);
    
    var ret = [];
    arrayNotes(arrnote, ret, 0);
    return ret;
};