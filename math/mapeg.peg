// parser definition for mathpeg
// mainly parsing block structure

{
  numparse = function (left) {
    var numstr = left.join(''); 
    var num = [];
    while (numstr.length > 6 ) {
      num.unshift(parseInt(numstr.slice(-6), 10));
      numstr = numstr.slice(0, -6);
    } 
    num.unshift(parseInt(numstr, 10));
    num.reverse();
    return num;
  };
}

start = 
  wsn s : statement+ wsn
  {return  s; }
  
  
statement = 
  wsn b: block ws stEnd
  { return b;}
  / wsn e: expr ws stEnd
  { return e;}

stEnd = 
  [\n\r] 
  / ";" 
  / !.
  / & (rightBracket) 

block = 
  wsn lb : leftBracket wsn e: expr wsn rb : rightBracket ws
  {return {tag: "block", left: lb, value : e, right : rb, type: "TBD" };}
  / wsn lb : leftBracket wsn s: statement+ wsn rb : rightBracket ws
  {return {tag: "block", left: lb, value : s, right : rb, type: "block" };}

leftBracket = 
  "(" / "[" / "{" / "\(" / "\[" / "\{" / ":" [\n]

rightBracket = 
  ")" / "]" / "}" / "\)" / "\]" / "\}" / "." [\n]  

// expr sucks up the ending absolute value if it is allowed in symbol
abshelper = 
  ws s: symbol  e: expr
  {return [s].concat(e);}

abs = 
  wsn l : "|"+ w : (word / block ) wsn a: abshelper? wsn r : "|"+ wsn
  {return {tag : "abs", left: l.length, right : r.length, expr :  [w].concat(a)};}


// expressions 
expr = 
 e: wordws+
 {return e;}
  
wordws = 
  ws w: word ws
  {return w;}

word = 
   abs 
  / identifier
  / number
  / string
  / terminal
  / special
  / block
  / symbol

terminal = 
  ws "''" i :[^ \n\r\t]+ & ([ \n\r\t] / !.) ws
  {return {tag : "terminal", value : i.join('')}; }

  
special = 
  ws "'" i :[^ \n\r\t]+ & ([ \n\r\t] / !.) ws
  {return {tag : "tok", value : i.join('')}; }

symbol = 
  !( leftBracket / rightBracket/ "|" ) a: [^A-Za-z0-9 \r\n\t]+
  {return {tag : "tok", value : a.join('')} ;}

string = 
  '"' str : [^"]+ '"' 
  { return {tag : "string", value : str.join(""), type:"str"} }

identifier = 
  first: [a-zA-Z] rest : [a-zA-Z0-9]*
  {return {tag: "tok", value : first + rest.join("")};}
  
  
number = 
  scientific
  / decimal
  / integer

scientific = 
  n : "-" ? left : [0-9]+  "." right : [0-9]+ "E" exp : [0-9]+
  {return {tag: "num", value: numparse(left.concat(right)), E : parseInt(exp.join("")) + (-1*right.length),
    neg : (n === "-" ? true : false), type:"num"}; 
  }  

decimal = 
    n : "-" ? left : [0-9]+  "." right : [0-9]+
  {return {tag: "num", value: numparse(left.concat(right)), E : (-1*right.length),
    neg : (n === "-" ? true : false), type:"num"}; 
  }  
  
integer = 
  n : "-" ? left : [0-9]+ 
  { return {tag : "num", E: 0, neg : (n === "-" ? true : false), value : numparse(left), type:"num"};}  

  
wsn = [ \n\r\t]*

ws = [ \t]*
